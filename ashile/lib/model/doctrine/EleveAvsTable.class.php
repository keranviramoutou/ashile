<?php

/**
 * EleveAvsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EleveAvsTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EleveAvsTable
     */
    public static function getInstance()
    {
      return Doctrine_Core::getTable('EleveAvs');
    }

		public function getListeEleveparSecteur($secteur)
	{
	
	
	   	$annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
		$deb = $annee->getDatedebutanneescolaire();
		$fin = $annee->getDatefinanneescolaire();
		//liste des élèves par secteur suivi par un avs
		//---------------------------------------------
	            $q = $this->createQuery('c')
							->select('d.id as demandeavs_id,m.id as mdph_id,ea.quotitehorraireavs as quotite, e.etat_acc as etat_acc, ea.datefin as datefin,ea.datedebut as datedebut,s.id as secteur_id, s.libellesecteur as secteur, ea.id as id, e.id as eleve_id,
							e.nom as nomeleve, e.prenom as prenomeleve, e.datenaissance as datenaissance,a.id as avs_id,e.sexe as sexe,
							a.nom as nomavs, a.prenom as prenomavs, o.id as orientation_id,o.datefin as datefinsco,o.datedebut as datedebutsco,et.id as etabsco_id, et.nometabsco as nometabsco, et.rne as rne,
							ty.id as typeetab_id, ty.nomtypeetablissement as nomtypeetab,
							d.datedebutnotif as datedebutnotif,d.datefinnotif as datefinnotif,d.quotitehorrairenotifie as quotitehorairenotifie,d.datedecisioncda as datedecisioncda
							,s.libellesecteur as libellesecteur')
							->from('EleveAvs ea')
							->innerJoin('ea.Eleve e ON e.id = ea.eleve_id')
							->innerJoin('ea.Avs a ON a.id = ea.avs_id')
							->leftJoin('e.Orientation o ON o.eleve_id = e.id')
							->leftJoin('o.Etabsco et ON et.id = o.etabsco_id')
							->leftJoin('et.Typeetablissement ty ON ty.id = et.typeetablissement_id')
							->leftJoin('e.Secteur s ON s.id = e.secteur_id')
						//	->leftJoin('a.ContratAvs c ON c.avs_id = a.id')
						//	->innerjoin('c.TypeContratAvs tc ON tc.id = c.typecontratavs_id')
							->leftJoin('e.Mdphs m ON e.id = m.eleve_id')
							->leftJoin('m.DemandeAvss d ON m.id = d.mdph_id')
						//	->leftJoin('d.Naturecontratavs n ON d.naturecontratavs_id = n.id')
						//	->Where('c.date_fin_contrat >=?', date('Y-m-d', time()))
						//	->andwhere('d.datefinnotif >=?', date('Y-m-d', time()))
						    ->Where('ea.datefin IS NULL OR ea.datefin >=?', date('Y-m-d', time()))
							->andWhere('o.datefin >=?', date('Y-m-d', time()))
							 ->andWhere('e.datesortie IS NULL or e.datesortie>=?', date('Y-m-d', time()))
						//->andwhere(' c.id in (select max(c.id) as maxcontratidavs from contrat_avs group by c.avs_id)')
							->andwhere('e.secteur_id = ?', $secteur);
                return $q->fetchArray();
	}
	
	public function getEleveSansAcc($secteur)
	{
		//liste des élèves sans personnel accompagnant
		//---------------------------------------------
	            $q = $this->createQuery('c')
                ->select (' e.id as EleveId,e.datenaissance as datenaissance,e.nom as nom,e.prenom as prenom,et.id as etid,o.id as orienid,et.rne as rne,et.nometabsco as etab,t.nomtypeetablissement as typetab,
				s.libellesecteur as secteur,e.secteur_id as secteur_id')
                ->from('Eleve e ')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
                ->leftjoin('e.Orientation o ON  e.id =  o.eleve_id')
                ->leftjoin('o.Etabsco et ON  et.id = o.etabsco_id')
                ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
				->Where('e.id NOT IN (select distinct eleve_id from eleve_avs)')
				->andwhere('e.secteur_id = ?', $secteur)
                ->orderby('secteur,nometabsco');
                return $q->fetchArray();
	}
	
	public function getEleveAvecAcc($eleve_id)
	{
		//liste des acc. pour un élève
		//-----------------------------
	            $q = $this->createQuery('c')
			    ->select ('a.id as eleveAvsId, e.id as EleveId,e.datenaissance as datenaissance,e.nom as nom,e.prenom as prenom,e.etat_acc as etat_acc,
				v.nom as avsnom,v.prenom as avsprenom,a.datefin as datefin,a.datedebut as datedebut,a.avs_id as avs_id,a.quotitehorraireavs as quotite,a.commentaire as commentaire,
				et.id as etid,o.id as orienid,et.rne as rne,et.nometabsco as etab,t.nomtypeetablissement as typetab,s.libellesecteur as secteur,s.id as secteur_id')
                ->from('EleveAvs a ')
                ->innerJoin('a.Eleve e ON e.id = a.eleve_id')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
                ->innerJoin('a.Avs v ON v.id = a.avs_id')
                ->leftjoin('e.Orientation o ON  e.id =  o.eleve_id')
                ->leftjoin('o.Etabsco et ON  et.id = o.etabsco_id')
                ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
				->where('e.id =?', $eleve_id)
                ->orderby('secteur,nometabsco');
                return $q->fetchArray();
	}
	public function getRechEleveviaAcc($avs_id)
	{
	    	
				$annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
				$deb = $annee->getDatedebutanneescolaire();
				$fin = $annee->getDatefinanneescolaire();
		//liste des élèves avec personnel accompagnant à la date du jour
		//--------------------------------------------------------------
	            $q = $this->createQuery('c')
                ->select ('a.avs_id as avs_id,e.id as EleveId,e.nom as nom,e.prenom as prenom,v.nom as avsnom,v.prenom as avsprenom,a.datefin as datefin,a.datedebut as datedebut,a.quotitehorraireavs as quotite,et.id as etid,o.id as orienid,et.rne as rne,
				et.nometabsco as etab,t.nomtypeetablissement as typetab,s.libellesecteur as secteur')
                ->from('EleveAvs a')
                ->innerJoin('a.Eleve e ON e.id = a.eleve_id')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
				->leftjoin('a.Avs v ON v.id = a.avs_id')
                ->leftjoin('e.Orientation o ON  e.id =  o.eleve_id')
                ->leftjoin('o.Etabsco et ON  et.id = o.etabsco_id')
                ->leftjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
                ->where('avs_id = ?', $avs_id)
			    ->andWhere('a.datefin IS NULL OR a.datefin >=?', date('Y-m-d', time()))
			    ->andWhere('o.datedebut >=?', $deb)
                ->andWhere('o.datefin <=?', $fin)
                ->orderby('datedebut desc,datefin desc');
                return $q->fetchArray();
	}
	
	public function getTotalQHnotifieacc($eleve_id)

	{
	 //Total de la quotité horaire notifiée pour l'accompagnant sélectionné
	 //-----------------------------------------------------------------------
               $q = $this->createQuery('c')
                ->select ('a.avs_id as avs_id,sum(a.quotitehorraireavs) as quotiteavs')
                ->from('EleveAvs a')
                ->where('avs_id = ?',$eleve_id)
				//->andWhere('a.datefin >=?', date('Y-m-d', time()))
				->andWhere('a.datedebut <=?', date('Y-m-d', time()))
				->andWhere('a.datefin IS NULL OR a.datefin >=?', date('Y-m-d', time()))
				->groupBy('a.avs_id');
                return $q->fetchArray();	
	}
	
	public function getTotalQHnotifiEleve($eleve_id)
	{
	 //Total de la quotité horaire notifiée pour l'élève sélectionné à la date du jour
	 //----------------------------------------------------------------------------------
				$q = $this->createQuery('c')
                ->select ('a.eleve_id as avs_id,sum(a.quotitehorraireavs) as quotiteeleve')
                ->from('EleveAvs a')
                ->where('eleve_id = ?', $eleve_id)
				//->andWhere('a.datefin >=?', date('Y-m-d', time()))
				->andWhere('a.datedebut <=?', date('Y-m-d', time()))
				->andWhere('a.datefin IS NULL OR a.datefin >=?', date('Y-m-d', time()))
				->groupBy('a.eleve_id');
                 return $q->fetchArray();		
	}
	public function getTotalQHcontratacc($avs_id)
	{
	// Total quotité horaire contrats pour le personnel acc. selectionné à la date du jour
	//-------------------------------------------------------------------------------------
  	      $q = $this->createQuery('c')
			->select ('c.id as contratId,a.id as avsid,sum(c.temps_hebdo) as temps_hebdo')
			->from('ContratAvs c')
			->innerJoin('c.Avs a ON a.id = c.avs_id')
			->where('avs_id = ?', $avs_id)
			->andWhere('date_fin_contrat >=?', date('Y-m-d', time()))
			->groupby('c.avs_id');
			return $q->fetchArray();
	}
	public function getEleveAcc($eleve_id) 
	{

	 // on cherche les acc. affectés à un élève en cours
	 //--------------------------------------------------
         $q = $this->createQuery('c')
		->select ('a.id as eleveAvsId,avs.id as avs_id,avs.nom as avsnom, avs.prenom as avsprenom, e.id as EleveId,e.etat_acc as etat_acc,e.datenaissance as datenaissance,e.nom as nom,e.prenom as prenom,a.quotitehorraireavs as quotitehorraireavs,a.datefin as datefin,a.datedebut as datedebut,a.quotitehorraireavs as quotite,et.id as etid,
		o.id as orienid,et.rne as rne,et.nometabsco as etab,t.nomtypeetablissement as typetab,s.libellesecteur as secteur,s.id as secteur_id')
		->from('EleveAvs a')
		->innerJoin('a.Eleve e ON e.id = a.eleve_id')
		->leftjoin('e.Secteur s ON s.id = e.secteur_id')
		->leftjoin('e.Orientation o ON  e.id =  o.eleve_id')
		->leftjoin('o.Etabsco et ON  et.id = o.etabsco_id')
		->leftjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
		->leftjoin('a.Avs avs ON avs.id = a.avs_id')
		->where('e.id =?', $eleve_id)
		->andWhere('a.datedebut <=?', date('Y-m-d',time()))
		->andWhere('a.datefin IS NULL OR a.datefin >=?', date('Y-m-d', time()))
	//	->andWhere('o.datedebut >=?', $deb)
       // ->andWhere('o.datefin <=?', $fin)
   		->orderby('datedebut desc,datefin desc');
		return $q->fetchArray();
         //---------------------------
	
	}
	public function getDerEleveAcc($eleve_id) 
	{
	 // on cherche le dernier acc. qui a suivi l'élève
	 //--------------------------------------------------
	 	    $tot_eleve_avs = 0;
			$res = Doctrine_Query::create()
			->select('max(a.id) as max_eleve_avs_id,a.eleve_id as eleve_id')
			->from('EleveAvs a')
			->groupBy('a.eleve_id')
			->having('a.eleve_id=?',$eleve_id) 
			->limit(1)
			->fetchArray();
            $tot_eleve_avs = count($res)		;
	    if ( $tot_eleve_avs > 0){
         $q = $this->createQuery('c')
		->select ('a.id as eleveAvsId,avs.id as avs_id,avs.nom as avsnom, avs.prenom as avsprenom, e.id as EleveId,e.etat_acc as etat_acc,e.datenaissance as datenaissance,e.nom as nom,e.prenom as prenom,a.quotitehorraireavs as quotitehorraireavs,a.datefin as datefin,a.datedebut as datedebut,a.quotitehorraireavs as quotite,et.id as etid,
		o.id as orienid,et.rne as rne,et.nometabsco as etab,t.nomtypeetablissement as typetab,s.libellesecteur as secteur,s.id as secteur_id')
		->from('EleveAvs a')
		->innerJoin('a.Eleve e ON e.id = a.eleve_id')
		->innerjoin('e.Secteur s ON s.id = e.secteur_id')
		->leftjoin('e.Orientation o ON  e.id =  o.eleve_id')
		->leftjoin('o.Etabsco et ON  et.id = o.etabsco_id')
		->leftjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
		->leftjoin('a.Avs avs ON avs.id = a.avs_id')
		->whereIn('a.id',$res[0]['max_eleve_avs_id'])
   		->orderby('datedebut desc,datefin desc');
		return $q->fetchArray();
         //---------------------------
			}
	}	
	
		public function getHistoEleveAcc($avs_id) 
	{
	 // on cherche les acc. d'un avs sélectionné
	 //--------------------------------------------------
         $q = $this->createQuery('c')
		->select ('avs.id as avs_id, avs.nom as avsnom, avs.prenom as avsprenom, e.id as EleveId,e.etat_acc as etat_acc,e.datenaissance as datenaissance,e.nom as nom,e.prenom as prenom,a.quotitehorraireavs as quotitehorraireavs,a.datefin as datefin,a.datedebut as datedebut,a.quotitehorraireavs as quotite,et.id as etid,
		o.id as orienid,et.rne as rne,et.nometabsco as etab,t.nomtypeetablissement as typetab,
		s.libellesecteur as secteur,s.id as secteur_id,commentaire as commentaire,avs.date_naissance as avsdatenaissance')
		->from('EleveAvs a')
		->innerJoin('a.Eleve e ON e.id = a.eleve_id')
		->innerjoin('e.Secteur s ON s.id = e.secteur_id')
		->leftjoin('e.Orientation o ON  e.id =  o.eleve_id')
		->leftjoin('o.Etabsco et ON  et.id = o.etabsco_id')
		->leftjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
		->leftjoin('a.Avs avs ON avs.id = a.avs_id')
		->where('a.avs_id = ?', $avs_id)
		->andWhere('a.datefin <=?', date('Y-m-d', time()))
		->andWhere('a.datefin IS NOT NULL')
		->orderby('datedebut desc,datefin desc');
		return $q->fetchArray();
         //---------------------------
	
	}
	
	public function getListeContratsAccavecPos($eleve_id)
	{
	// Liste des contrats pour l'accompagnant avec position
	//-----------------------------------------------------
	            $q = $this->createQuery('c')
			    ->select ('a.id as eleveAvsId,c.id as contrat_avs_id, e.id as eleve_id,e.datenaissance as datenaissance,e.nom as nom,e.prenom as prenom,e.etat_acc as etat_acc,
				v.nom as avsnom,v.prenom as avsprenom,a.datefin as datefin,a.datedebut as datedebut,a.avs_id as avs_id,a.quotitehorraireavs as quotite,a.commentaire as commentaire,
				,s.libellesecteur as secteur,s.id as secteur_id,c.temps_hebdo as temps_hebdo,c.date_debut_contrat as date_debut_contrat,c.date_fin_contrat as date_fin_contrat,tc.typecontrat as typecontrat,
				p.id as position_id,p.datedebut as datedebut_pos,p.datefin as datefin_pos,p.typepositionavs_id as typepositionavs_id')
                ->from('EleveAvs a ')
                ->innerJoin('a.Eleve e ON e.id = a.eleve_id')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
                ->innerJoin('a.Avs v ON v.id = a.avs_id')
				->innerjoin('v.ContratAvs c ')
				->innerjoin('c.PositionAvss p ')
				->innerjoin('c.TypeContratAvs tc ON tc.id = c.typecontratavs_id')
				->where('e.id =?', $eleve_id)
                ->orderby('secteur');
                return $q->fetchArray();
         //---------------------------------------------------
	}

}
