<?php

/**
 * EleveTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EleveTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object EleveTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Eleve');
    }
	public function getEleveAutocompletion($q, $limit){
    $dq = Doctrine_Query::create()
            ->select('e.id, e.nom,e.prenom,m.id,d.datedecisioncda as datedecisioncda,d.decisioncda as decisioncda,e.datenaissance as datenaissance,d.id,t.id')
            ->from('Eleve e')
			 ->leftJoin('e.Mdphs m ON e.id = m.eleve_id')
			 ->leftJoin('m.DemandeMateriels d  ')
            ->leftJoin('d.Typemateriel t ON t.id = d.typemateriel_id')
			->andwhere('d.datedecisioncda IS NOT NULL')
			->andWhere('d.datefinnotif >=?', date('Y-m-d', time()))	
            ->andwhere('e.nom LIKE ?','%'.$q.'%')
		    ->orwhere('e.prenom LIKE ?','%'.$q.'%')
			//->orwhere('d.decisioncda LIKE ?','%'.$q.'%')
	        ->limit($limit)
            ->orderBy('e.nom ASC');
    return $dq->execute();
	}
 
	public function getEleveAvecCDA() {
    $q = Doctrine_Query::create()
            ->select('e.id as eleve_id, e.nom,e.prenom,m.id,d.datedecisioncda as datedecisioncda,e.datenaissance as datenaissance,d.id,t.id,t.libelletypemateriel as libelletypemateriel')
            ->from('Eleve e')
			 ->leftJoin('e.Mdphs m ON e.id = m.eleve_id')
			 ->leftJoin('m.DemandeMateriels d  ')
            ->leftJoin('d.Typemateriel t ON t.id = d.typemateriel_id')
			//->andwhere('d.datedecisioncda IS NOT NULL')
			//->andWhere('d.datefinnotif >=?', date('Y-m-d', time()))	
			//->andWhere('t.id =?', $type)	
            ->orderBy('e.nom ASC');
    return $q->execute();
	}
 
	public function getEleveParEtab($secteur)
    {
        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();

        $q = Doctrine_query::create()
                ->from('Orientation o')
                ->innerJoin('o.Eleve e')
                ->leftJoin('o.Etabsco et')
                ->where('e.secteur_id = ?', $secteur->getId())
                ->andWhere('o.datedebut >=?', $deb)
                ->andWhere('o.datefin <=?', $fin)
                ->andWhere('e.datesortie IS NULL or e.datesortie>=?', date('Y-m-d', time()))
                ->orderBy('et.nometabsco ASC')
                ->addOrderBy('e.nom');
        return $q;
    }
   
   
       public function getListeEleveSuiviAVS()
  {
		//liste des élèves qui ont un AVS affecté.
		//-------------------------------------------
        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();

        $q = $this->createQuery('c')
                ->select('a.id as eleveId,o.id as orientationId,e.nom as nom,e.prenom as prenom,et.nometabsco as nometabsco,et.rne as rne,s.libellesecteur as libellesecteur,e.datenaissance as datenaissance,t.nomtypeetablissement as typetab,count(a.id) as compteur')
                ->from('EleveAvs a')
				->innerjoin('a.Eleve e ON a.eleve_id = e.id')
				->innerJoin('e.Orientation o ON e.id = o.eleve_id')
				->innerJoin('o.Etabsco et ON o.etabsco_id = et.id')
				->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
				->groupBy('a.eleve_id')
                ->orderBy('a.eleve_id')
                ->addOrderBy('e.nom');
                return $q->fetchArray();
  }
   
     public function getListEleves()
  {

        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();

        $q = $this->createQuery('c')
                ->select('e.id as eleveId,o.id as orientationId,e.nom as nom,e.prenom as prenom,et.nometabsco as nometabsco,et.rne as rne,s.libellesecteur as libellesecteur,s.id as secteur_id,e.datenaissance as datenaissance,t.nomtypeetablissement as typetab')
                ->from('Eleve e')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
                ->leftJoin('e.Orientation o ON e.id = o.eleve_id')
                ->innerJoin('o.Etabsco et ON o.etabsco_id = et.id')
                ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
                ->andWhere('o.datedebut >=?', $deb)
                ->andWhere('o.datefin <=?', $fin)
                ->andWhere('e.datesortie IS NULL or e.datesortie>=?', date('Y-m-d', time()))
				//->where('e.id not in (select eleve_id from eleve_avs)')
                ->orderBy('s.libellesecteur,et.nometabsco ASC,e.nom')
                ->addOrderBy('e.nom');
                return $q->fetchArray();
  }
  
      public function getElevessansAvs($secteur)
  {

        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();
         $date = date('Y-m-d', time() );
        $q = $this->createQuery('c')
                ->select('e.id as eleveId,o.id as orientationId,e.nom as nom,e.prenom as prenom,et.nometabsco as nometabsco,et.rne as rne,s.libellesecteur as libellesecteur,s.id as secteur_id,e.datenaissance as datenaissance,t.nomtypeetablissement as typetab')
                ->from('Eleve e')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
                ->leftJoin('e.Orientation o ON e.id = o.eleve_id')
                ->innerJoin('o.Etabsco et ON o.etabsco_id = et.id')
                ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
                ->andWhere('o.datedebut >=?', $deb)
                ->andWhere('o.datefin <=?', $fin)
               ->andWhere('e.datesortie IS NULL or e.datesortie>=?', date('Y-m-d', time()))
				->andwhere('e.secteur_id = ?', $secteur)
				//->andwhere('e.id not in (select eleve_id from eleve_avs)')
				->andwhere('e.id not in (select eleve_id from eleve_avs) or e.id in (select eleve_id from eleve_avs  where datefin <= "31/07/2013" )')
			//	->orwhere ('e.id in (select eleve_id from eleve_avs  where datefin <= date('Y-m-d', time() )')
                ->orderBy('s.libellesecteur,et.nometabsco ASC,e.nom');
                return $q->fetchArray();
  }
  
  public function getListElevesparSecteur($secteur)
  {

        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();

        $q = $this->createQuery('c')
                ->select('e.id as eleveId,o.id as orientationId,e.nom as nom,e.prenom as prenom,et.nometabsco as nometabsco,et.rne as rne,s.libellesecteur as libellesecteur,
				s.id as secteur_id,e.datenaissance as datenaissance,t.nomtypeetablissement as typetab')
                ->from('Eleve e')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
                ->leftJoin('e.Orientation o ON e.id = o.eleve_id')
                ->innerJoin('o.Etabsco et ON o.etabsco_id = et.id')
                ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
		        ->Where('(e.datesortie IS NULL or e.datesortie>= "'.date('Y-m-d', time()).'") and o.datedebut >= "'.$deb.'" and o.datefin <= "'.$fin.'" and e.secteur_id = "'.$secteur.'"')
	            ->orderBy('libellesecteur,et.nometabsco ASC,e.nom')
                ->addOrderBy('e.nom');
                return $q->fetchArray();
  }
 
   public function getListElevesparSecteurGenerale($secteur)
  {

        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();

        $q = $this->createQuery('c')
                ->select('e.id as eleveId,e.nom as nom,e.prenom as prenom,s.libellesecteur as libellesecteur,
				s.id as secteur_id,e.datenaissance as datenaissance,e.sexe as sexe')
                ->from('Eleve e')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
 		        ->Where('(e.datesortie IS NULL or e.datesortie>= "'.date('Y-m-d', time()).'") and e.secteur_id = "'.$secteur.'"')
	            ->orderBy('libellesecteur,e.nom')
                ->addOrderBy('e.nom');
                return $q->fetchArray();
  }
  
	public function getEleveSansEtab($secteur)
   {
       //$eleves = $this->findBySecteurId($secteur->getId());
       $eleves = Doctrine_Query::Create()
					->select('*')
					->from('Eleve e')
					->where('e.secteur_id = ?', $secteur)
					->execute();
       
       
       $eleveIds = array();
       foreach ($eleves as $eleve){
         //  if (!$eleve->getOrientationValid())
               $eleveIds[] = $eleve->getId();
       }
        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
      //  $deb = $annee->getDatedebutanneescolaire();
      //  $fin = $annee->getDatefinanneescolaire();

       $q = Doctrine_query::create()
               ->select('*')
               ->from('Eleve e')
			   ->where('e.secteur_id = ?', $secteur)
               ->where('e.id NOT IN (select distinct eleve_id from orientation where datedebut >= "'.$deb.'" and datefin <= "'.$fin.'" and datefin >= "'.date('Y-m-d', time()).'")')
               ->andWhereIn('e.id', $eleveIds)
               ->andWhere('e.datesortie IS NULL or e.datesortie>=?', date('Y-m-d', time()))
               ->orderBy('e.nom ASC');
       return $q->fetchArray();

   }
   
   
   	public function getEleveAvecScolaritéIncomplete($secteur)
   {
   
        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();
       
		
       $q = $this->createQuery('c')
               ->select('ty.id as ty_id,c.id as classe_id,e.nom as nom,e.prenom as prenom,et.nometabsco as nometabsco,et.rne as rne,e.secteur_id as secteur_id,s.libellesecteur as libellesecteur,e.id as eleve_id,e.ine as ine,e.datenaissance as datenaissance,t.nomtypeetablissement as typetab,
			   o.id as orienId,o.datedebut as datedebut,o.datefin as datefin,o.niveauscolaire_id as niveauscolaire_id,n.nomniveauscolaire as nomniveauscolaire,ty.nomtypeclasse as nomlongtypeclasse,et.id as etabsco_id,ty.nomtypeclasse as nomtypeclasse,
			   e.adresseelevebat as adres1,e.adresseleverue as adres2')
			    ->from('Eleve e')
				->innerjoin('e.Secteur s ON s.id = e.secteur_id')
			   ->innerJoin('e.Orientation o ON e.id = o.eleve_id')
			   ->leftJoin('o.Niveauscolaire n ON n.id = o.niveauscolaire_id')
			   ->leftJoin('o.Classe c ON o.classe_id = c.id')
			   ->innerJoin('o.Etabsco et ON o.etabsco_id = et.id')
			   ->leftJoin('c.TypeClasse ty ON c.typeclasse_id = ty.id')
			  ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
			   ->where('e.secteur_id = ?', $secteur)
               ->andwhere('o.classe_id is null or o.niveauscolaire_id is null or n.nomniveauscolaire like "ND"')
			   ->andWhere('o.datedebut >=?', $deb)
               ->andWhere('o.datefin <=?', $fin)
			   ->andWhere('o.datefin >=?', date('Y-m-d', time()))
			   ->andWhere('e.datesortie IS NULL or e.datesortie>=?', date('Y-m-d', time()))
               ->orderBy('e.nom ASC');
        return $q->fetchArray();

   }
   
      	public function getListeEleveAvecScolaritéIncomplete()
   {
   
        $annee = Doctrine_Core::getTable('Anneescolaire')->getAnneeScolaireEnCours();
        $deb = $annee->getDatedebutanneescolaire();
        $fin = $annee->getDatefinanneescolaire();
       
		
       $q = $this->createQuery('c')
               ->select('ty.id as ty_id,c.id as classe_id,e.nom as nom,e.prenom as prenom,et.nometabsco as nometabsco,et.rne as rne,e.secteur_id as secteur_id,s.libellesecteur as libellesecteur,e.id as eleve_id,e.ine as ine,e.datenaissance as datenaissance,t.nomtypeetablissement as typetab,
			   o.id as orienId,o.datedebut as datedebut,o.datefin as datefin,o.niveauscolaire_id as niveauscolaire_id,n.nomniveauscolaire as nomniveauscolaire,ty.nomtypeclasse as nomlongtypeclasse,et.id as etabsco_id,ty.nomtypeclasse as nomtypeclasse,
			   e.adresseelevebat as adres1,e.adresseleverue as adres2')
			    ->from('Eleve e')
				->innerjoin('e.Secteur s ON s.id = e.secteur_id')
			   ->innerJoin('e.Orientation o ON e.id = o.eleve_id')
			   ->leftJoin('o.Niveauscolaire n ON n.id = o.niveauscolaire_id')
			   ->leftJoin('o.Classe c ON o.classe_id = c.id')
			   ->innerJoin('o.Etabsco et ON o.etabsco_id = et.id')
			   ->leftJoin('c.TypeClasse ty ON c.typeclasse_id = ty.id')
			  ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
			   ->andwhere('o.classe_id is null or o.niveauscolaire_id is null or n.nomniveauscolaire like "ND"')
			   ->andWhere('o.datedebut >=?', $deb)
               ->andWhere('o.datefin <=?', $fin)
			   ->andWhere('o.datefin >=?', date('Y-m-d', time()))
			   ->andWhere('e.datesortie IS NULL or e.datesortie>=?', date('Y-m-d', time()))
               ->orderBy('e.nom ASC');
        return $q->fetchArray();

   }
   	public function getEleveSansEtabbis($secteur)
   {
    
	        $q = $this->createQuery('c')
                ->select('max(o.id) as maxid,e.id as eleveId,o.id as orientationId,e.nom as nom,e.prenom as prenom,et.nometabsco as nometabsco,et.rne as rne,s.libellesecteur as libellesecteur,
				s.id as secteur_id,e.datenaissance as datenaissance,t.nomtypeetablissement as typetab,o.datefin as datefin')
                ->from('Orientation o')
	            ->leftJoin('o.Eleve e ON e.id = o.eleve_id')
                ->innerjoin('e.Secteur s ON s.id = e.secteur_id')
                ->innerJoin('o.Etabsco et ON o.etabsco_id = et.id')
                ->innerjoin('et.Typeetablissement t ON t.id = et.typeetablissement_id')
                ->Where('e.datesortie IS NULL and e.secteur_id = "'.$secteur.'" and o.datefin < "'.date('Y-m-d', time()).'" ')
				->orwhere('et.rne = "9740061Y" and o.datefin is null')
				//->andwhere('e.secteur_id = ?', $secteur)
			   //->andWhere('o.datefin <?',  date('Y-m-d', time()))
                ->groupBy('o.eleve_id')
                ->OrderBy('e.nom');
                return $q->fetchArray();			
	
   }



}
