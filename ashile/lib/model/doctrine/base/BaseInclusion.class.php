<?php

/**
 * BaseInclusion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $classe_id
 * @property string $temspclasseintegration
 * @property Classe $Classe
 * @property Doctrine_Collection $Orientations
 * 
 * @method integer             getClasseId()               Returns the current record's "classe_id" value
 * @method string              getTemspclasseintegration() Returns the current record's "temspclasseintegration" value
 * @method Classe              getClasse()                 Returns the current record's "Classe" value
 * @method Doctrine_Collection getOrientations()           Returns the current record's "Orientations" collection
 * @method Inclusion           setClasseId()               Sets the current record's "classe_id" value
 * @method Inclusion           setTemspclasseintegration() Sets the current record's "temspclasseintegration" value
 * @method Inclusion           setClasse()                 Sets the current record's "Classe" value
 * @method Inclusion           setOrientations()           Sets the current record's "Orientations" collection
 * 
 * @package    ash
 * @subpackage model
 * @author     regis Gravant
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseInclusion extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('inclusion');
        $this->hasColumn('classe_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('temspclasseintegration', 'string', 50, array(
             'type' => 'string',
             'regexp' => '/^([\\s]*[0-9]+[\\s]*)+$/',
             'length' => 50,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Classe', array(
             'local' => 'classe_id',
             'foreign' => 'id',
             'owningSide' => true));

        $this->hasMany('Orientation as Orientations', array(
             'local' => 'id',
             'foreign' => 'inclusion_id'));
    }
}